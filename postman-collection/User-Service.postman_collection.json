{
	"info": {
		"_postman_id": "bc427410-dbf9-46aa-9b4e-e5992aa3dba4",
		"name": "User-Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45172872",
		"_collection_link": "https://web.postman.co/workspace/Real-Time-Chat~c67a8db3-b715-4998-b9ca-039bd4e6253f/collection/41333252-bc427410-dbf9-46aa-9b4e-e5992aa3dba4?action=share&source=collection_link&creator=45172872"
	},
	"item": [
		{
			"name": "Registration Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"if(response.tokenPair.accessToken) {",
							"    pm.environment.set(\"ACCESS_TOKEN\", response.tokenPair.accessToken);",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"User object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user).to.be.an('object');",
							"    pm.expect(responseData.user.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.username).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.isValid).to.exist.and.to.be.a('boolean');",
							"    // pm.expect(responseData.user.userImage).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"TokenPair object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.tokenPair).to.be.an('object');",
							"    pm.expect(responseData.tokenPair.accessToken).to.be.a('string');",
							"    pm.expect(responseData.tokenPair.refreshToken).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Valid Set-Cookie header is present\", function() {",
							"  pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
							"  pm.expect(pm.response.headers.get('Set-Cookie')).to.include(\"refreshToken\");",
							"});",
							"",
							"pm.test(\"Token cookie is set to a valid value\", function() {",
							"    var token = pm.cookies.get('refreshToken');",
							"    pm.expect(token).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"fantom.assasinnnn@mail.ru\",\n    \"username\": \"fantom\",\n    \"password\": \"12345678\",\n    \"passwordConfirm\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/registration",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"if(response.tokenPair.accessToken) {",
							"    pm.environment.set(\"ACCESS_TOKEN\", response.tokenPair.accessToken);",
							"}",
							"",
							"if (response.user._id) {",
							"    pm.environment.set(\"USER_ID\", response.user._id);",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"User object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user).to.be.an('object');",
							"    pm.expect(responseData.user.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.username).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.isValid).to.exist.and.to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"TokenPair object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.tokenPair).to.be.an('object');",
							"    pm.expect(responseData.tokenPair.accessToken).to.be.a('string');",
							"    pm.expect(responseData.tokenPair.refreshToken).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Valid Set-Cookie header is present\", function() {",
							"  pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
							"  pm.expect(pm.response.headers.get('Set-Cookie')).to.include(\"refreshToken\");",
							"});",
							"",
							"pm.test(\"Token cookie is set to a valid value\", function() {",
							"    var token = pm.cookies.get('refreshToken');",
							"    pm.expect(token).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"armanmartirosyan81@gmail.com\",\n    \"password\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/login",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activation Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/activate/c8055339-1eb7-4cf8-b094-3c3c6dbd15db",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"activate",
						"c8055339-1eb7-4cf8-b094-3c3c6dbd15db"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"if(response.tokenPair.accessToken) {",
							"    pm.environment.set(\"ACCESS_TOKEN\", response.tokenPair.accessToken);",
							"}",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"User object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user).to.be.an('object');",
							"    pm.expect(responseData.user.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.username).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.user.isValid).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.user.userImage).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"TokenPair object has the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.tokenPair).to.be.an('object');",
							"    pm.expect(responseData.tokenPair.accessToken).to.be.a('string');",
							"    pm.expect(responseData.tokenPair.refreshToken).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Valid Set-Cookie header is present\", function() {",
							"  pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
							"  pm.expect(pm.response.headers.get('Set-Cookie')).to.include(\"refreshToken\");",
							"});",
							"",
							"pm.test(\"Token cookie is set to a valid value\", function() {",
							"    var token = pm.cookies.get('refreshToken');",
							"    pm.expect(token).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/refresh",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response statis is 200\", function () {",
							"    pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"pm.test(\"Response contain msg: success field\", function() {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.msg).to.exist;",
							"    pm.expect(responseData.msg).to.be.equal('Success');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/logout",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info Request",
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "secret",
							"value": "{{JWT_ACCESS_SECRET}}",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/mail",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"mail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Avatar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response statis is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body status is true\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.success).to.exist.and.to.be.equal(true);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"avatar\": \"https://m.media-amazon.com/images/M/MV5BOWJhYjdjNWEtMWFmNC00ZjNkLThlZGEtN2NkM2U3NTVmMjZkXkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/avatar",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'success'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Success field is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.success).to.be.a('boolean');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"PainIX12\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}:{{PORT}}/api/user/update",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user",
						"update"
					]
				}
			},
			"response": []
		}
	]
}